if (typeof(DeviceInfo) != 'object')
    DeviceInfo = {};

/**
 * This represents the PhoneGap API itself, and provides a global namespace for accessing
 * information about the state of PhoneGap.
 * @class
 */
PhoneGap = {
    queue: {
        ready: true,
        commands: [],
        timer: null
    },
    callbacks: [],
    _constructors: []
};

/**
 * Boolean flag indicating if the PhoneGap API is available and initialized.
 */
PhoneGap.available = DeviceInfo.uuid != undefined;

/**
 * Add an initialization function to a queue that ensures it will run and initialize
 * application constructors only once PhoneGap has been initialized.
 * @param {Function} func The function callback you want run once PhoneGap is initialized
 */
PhoneGap.addConstructor = function(func) {
    var state = document.readyState;
    if (state != 'loaded' && state != 'complete')
        PhoneGap._constructors.push(func);
    else
        func();
};
(function() {
    var timer = setInterval(function() {
        var state = document.readyState;
        if (state != 'loaded' && state != 'complete')
            return;
        clearInterval(timer);
        while (PhoneGap._constructors.length > 0) {
            var constructor = PhoneGap._constructors.shift();
            try {
                constructor();
            } catch(e) {
                if (typeof(debug['log']) == 'function')
                    debug.log("Failed to run constructor: " + debug.processMessage(e));
                else
                    alert("Failed to run constructor: " + e.message);
            }
        }
    }, 1);
})();


/**
 * Execute a PhoneGap command in a queued fashion, to ensure commands do not
 * execute with any race conditions, and only run when PhoneGap is ready to
 * recieve them.
 * @param {String} command Command to be run in PhoneGap, e.g. "ClassName.method"
 * @param {String[]} [args] Zero or more arguments to pass to the method
 */
PhoneGap.exec = function() {
    PhoneGap.queue.commands.push(arguments);
    if (PhoneGap.queue.timer == null)
        PhoneGap.queue.timer = setInterval(PhoneGap.run_command, 10);
};
/**
 * Internal function used to dispatch the request to PhoneGap.  This needs to be implemented per-platform to
 * ensure that methods are called on the phone in a way appropriate for that device.
 * @private
 */
PhoneGap.run_command = function() {
};

/**
 * Register a callback function in JavaScript with a call into the device.  It assigns a unique identifier to the call/callback pair
 * that will allow PhoneGap commands to invoke JavaScript functions when events occur.  Use these with caution, because these references
 * have to be manually deleted, as there is no automatic way to determine when a callback function is no longer needed.
 * @param {Function} callback Callback function to bind with an ID
 * @returns {Number} Unique identifier used to represent this callback function
 */
PhoneGap.registerCallback = function(cb) {
    if (typeof(cb) != 'function')
        return null;

    // XXX DON'T pop from this array, ever...don't even think about it.  That would shift all the IDs, and fire all the wrong events.
    // This would generally be considered a "Bad Thing" by most people.  So don't do it.  If you want to remove a callback, set its
    // value to null...or use unregisterCallback;
    return PhoneGap.callbacks.push(cb);
};

/**
 * Safely removes a callback that had previously been created by registerCallback.
 * @param {Number} id Unique identifier returned from registerCallback
 */
PhoneGap.unregisterCallback = function(id) {
    PhoneGap.callbacks[id - 1] = null;
}

/**
 * Calls a callback based on its registered unique ID.  This will typically be called directly from the device.
 * @param {Number} id Unique identifier representing a callback
 * @param {Array} args Arguments to be passed into the function
 * @returns {Object} returns whatever the callback returns, or \c null if the function has been removed.
 */
PhoneGap.invokeCallback = function(id, args) {
    if (typeof(args) != 'array')
        args = [];
    var idx = id - 1;
    if (typeof(PhoneGap.callbacks[idx]) != 'function')
        return null;
    return PhoneGap.callbacks[idx](args);
}
